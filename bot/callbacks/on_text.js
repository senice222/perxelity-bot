import UserModel from "../../schemas/User.model.js";
import generateResponse from "../utils/generateRequest.js";

const cleanHtmlTags = (text) => {
  return text.replace(/<\/?think>/g, ""); // –£–¥–∞–ª—è–µ–º <think> –∏ </think>
};

const onTextRequest = (bot) => {
  bot.on("text", async (ctx) => {
    const userQuestion = ctx.message.text;
    const user = await UserModel.findOne({ id: ctx.from.id });

    const message = await ctx.reply(`üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${userQuestion}"...`);

    setTimeout(() => {
      ctx.telegram.editMessageText(ctx.chat.id, message.message_id, null,
        `üåê <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫</b>\n\nüéØ –ó–∞–ø—Ä–æ—Å: "${userQuestion}"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...`,
        { parse_mode: "HTML" }
      );
    }, 2000);

    try {
      const { answer, reasoningSteps, citations } = await generateResponse(userQuestion);

      let responseText = `üìå <b>–û—Ç–≤–µ—Ç:</b>\n\n${cleanHtmlTags(answer)}`;

      if (reasoningSteps.length > 0) {
        responseText += "\n\nüß† <b>–®–∞–≥–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:</b>\n";
        reasoningSteps.forEach((step, index) => {
          responseText += `üîπ ${index + 1}. ${step}\n`;
        });
      }

      if (citations.length > 0) {
        responseText += "\n\nüìö <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n";
        citations.forEach((source, index) => {
          responseText += `üîó <a href="${source}">${index + 1}. –ò—Å—Ç–æ—á–Ω–∏–∫</a>\n`;
        });
      }

      await ctx.telegram.editMessageText(ctx.chat.id, message.message_id, null, responseText, {
        parse_mode: "HTML",
        disable_web_page_preview: true
      });

      await user.checkTrialStatus();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
      ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });
};


export default onTextRequest;
